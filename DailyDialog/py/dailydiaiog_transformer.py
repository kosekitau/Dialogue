# -*- coding: utf-8 -*-
"""Dailydiaiog_Transformer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14RAo81KeDTEKDO_whVEKyG99EcgJ5iIU
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

#学習済みの分散表現をロードする
from torchtext.vocab import Vectors

english_fasttext_vectors = Vectors(name='drive/My Drive/wiki-news-300d-1M.vec')

print(english_fasttext_vectors.dim)
print(len(english_fasttext_vectors.itos))

import string
import re

# 以下の記号はスペースに置き換えます（カンマ、ピリオドを除く）。
# punctuationとは日本語で句点という意味です
print("区切り文字：", string.punctuation)
# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~

# 前処理


def preprocessing_text(text):
    # 改行コードを消去
    text = re.sub('<br />', '', text)

    # カンマ、ピリオド以外の記号をスペースに置換
    for p in string.punctuation:
        if (p == ".") or (p == ","):
            continue
        else:
            text = text.replace(p, " ")

    # ピリオドなどの前後にはスペースを入れておく
    text = text.replace(".", " . ")
    text = text.replace(",", " , ")
    return text

# 分かち書き（今回はデータが英語で、簡易的にスペースで区切る）


def tokenizer_punctuation(text):
    return text.strip().split()


# 前処理と分かち書きをまとめた関数を定義
def tokenizer_with_preprocessing(text):
    text = preprocessing_text(text)
    ret = tokenizer_punctuation(text)
    return ret


# 動作を確認します
print(tokenizer_with_preprocessing('I like cats+'))

import torchtext
from torchtext.data.utils import get_tokenizer

MAX_LENGTH = 30

#テキストに処理を行うFieldを定義
#fix_lengthはtokenの数
SRC = torchtext.data.Field(sequential=True, use_vocab=True, tokenize=tokenizer_with_preprocessing,
                            lower=True, include_lengths=True, batch_first=True, fix_length=MAX_LENGTH,
                            init_token='<cls>', eos_token='<eos>')

TRG = torchtext.data.Field(sequential=True, use_vocab=True, tokenize=tokenizer_with_preprocessing,
                            lower=True, include_lengths=True, batch_first=True, fix_length=MAX_LENGTH,
                            init_token='<cls>', eos_token='<eos>')

#pandasでcsvを保存するときに、labelをintでキャストしておかないとエラーでるから注意
train_ds, val_ds, test_ds = torchtext.data.TabularDataset.splits(
    path='drive/My Drive/dataset/DailyDialog/', train='train.csv', validation='validation.csv', 
    test='test.csv', format='csv', fields=[('src', SRC), ('trg', TRG)])

SRC.build_vocab(train_ds, vectors=english_fasttext_vectors)
TRG.build_vocab(train_ds, vectors=english_fasttext_vectors)
print(TRG.vocab.stoi)

from torchtext import data

train_dl = data.Iterator(train_ds, batch_size=64, train=True)
val_dl = data.Iterator(val_ds, batch_size=64, train=False, sort=False)
batch = next(iter(val_dl))
print(batch.src[0].shape)
print(batch.trg[0].shape)

import math
from torch.autograd import Variable
import torch.nn.functional as F

#モデルの定義
class Embedder(nn.Module):
  def __init__(self, text_embedding_vecotrs):
    super(Embedder, self).__init__()
    self.embeddings = nn.Embedding.from_pretrained(
        embeddings=text_embedding_vecotrs, freeze=True)
    
  def forward(self, x):
    x = self.embeddings(x)
    return x

class PositionalEncoder(nn.Module):
  def __init__(self, d_model, max_seq_len=200, dropout_rate=0.1):
    super().__init__()
    self.d_model = d_model
    self.dropout = nn.Dropout(dropout_rate)
    # create constant 'pe' matrix with values dependant on 
    # pos and i
    pe = torch.zeros(max_seq_len, d_model)
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    pe = pe.to(device)

    for pos in range(max_seq_len):
        for i in range(0, d_model, 2):
            pe[pos, i] = \
            math.sin(pos / (10000 ** ((2 * i)/d_model)))
            pe[pos, i + 1] = \
            math.cos(pos / (10000 ** ((2 * (i + 1))/d_model)))
    pe = pe.unsqueeze(0)
    self.register_buffer('pe', pe)
 
    
  def forward(self, x):
    # make embeddings relatively larger
    x = x * math.sqrt(self.d_model)
    #add constant to embedding
    seq_len = x.size(1)
    pe = Variable(self.pe[:,:seq_len], requires_grad=False)
    
    x = x + pe
    return self.dropout(x)

def attention(q, k, v, d_k, mask=None, dropout=None):

  #queryとkeyの関連度をだす
  scores = torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(d_k) #[batch, heads, length, length]
  #maskをかける
  if mask is not None:
    mask = mask.unsqueeze(1)
    scores = scores.masked_fill(mask==0, -1e9)

  #AttentionWeight
  scores = F.softmax(scores, dim=-1)
  attention_weight = scores

  if dropout is not None:
    scores = dropout(scores)
  #valueを取り出す
  output = torch.matmul(scores, v) #[batch, heads, length, d_model]
  return output, attention_weight

class MultiHeadAttention(nn.Module):
  def __init__(self, heads, d_model, dropout_rate=0.1):
    super().__init__()
    self.d_model = d_model
    self.d_k = d_model // heads
    self.h = heads
    self.q_linear = nn.Linear(d_model, d_model)
    self.k_linear = nn.Linear(d_model, d_model)
    self.v_linear = nn.Linear(d_model, d_model)

    self.dropout = nn.Dropout(dropout_rate)
    self.out = nn.Linear(d_model, d_model)

  def forward(self, q, k, v, mask=None):
    bs = q.size(0)

    q = self.q_linear(q).view(bs, -1, self.h, self.d_k) #[batch_size, length, heads, d_k]
    k = self.k_linear(k).view(bs, -1, self.h, self.d_k)
    v = self.v_linear(v).view(bs, -1, self.h, self.d_k)

    q = q.transpose(1, 2)
    k = k.transpose(1, 2)
    v = v.transpose(1, 2)

    #
    scores, attention_weight = attention(q, k, v, self.d_k, mask, self.dropout)
    concat = scores.transpose(1, 2).contiguous().view(bs, -1, self.d_model)
    output = self.out(concat)
    return output, attention_weight

class FeedForward(nn.Module):
  def __init__(self, d_model, d_ff=2048, dropout_rate=0.1):
    super().__init__()
    self.linear_1 = nn.Linear(d_model, d_ff)
    self.dropout = nn.Dropout(dropout_rate)
    self.linear_2 = nn.Linear(d_ff, d_model)

  def forward(self, x):
    x = self.dropout(F.relu(self.linear_1(x)))
    x = self.linear_2(x)
    return x

class EncoderLayer(nn.Module):
  def __init__(self, d_model, heads, dropout_rate=0.1):
    super().__init__()
    #LayerNormalizetion
    self.norm_1 = nn.LayerNorm(d_model)
    self.norm_2 = nn.LayerNorm(d_model)

    self.attn = MultiHeadAttention(heads, d_model, dropout_rate=dropout_rate)
    self.ff = FeedForward(d_model, dropout_rate=dropout_rate)

    self.dropout_1 = nn.Dropout(dropout_rate)
    self.dropout_2 = nn.Dropout(dropout_rate)

  def forward(self, x, mask):
    x2 = self.norm_1(x)
    output, attention_weight = self.attn(x2, x2, x2, mask)
    x = x+self.dropout_1(output)
    x2 = self.norm_2(x)
    x = x+self.dropout_2(self.ff(x2))

    return x, attention_weight

# デコーダ自体の宣言
class DecoderLayer(nn.Module):
  def __init__(self, d_model, heads, dropout=0.1):
    super().__init__()
    self.norm_1 = nn.LayerNorm(d_model)
    self.norm_2 = nn.LayerNorm(d_model)
    self.norm_3 = nn.LayerNorm(d_model)
        
    self.dropout_1 = nn.Dropout(dropout)
    self.dropout_2 = nn.Dropout(dropout)
    self.dropout_3 = nn.Dropout(dropout)
        
    self.attn_1 = MultiHeadAttention(heads, d_model, dropout_rate=dropout)
    self.attn_2 = MultiHeadAttention(heads, d_model, dropout_rate=dropout)
    self.ff = FeedForward(d_model, dropout_rate=dropout)

  def forward(self, x, e_outputs, src_mask, trg_mask):
    x2 = self.norm_1(x)
    output, attention_weight = self.attn_1(x2, x2, x2, trg_mask)
    x = x + self.dropout_1(output)

    x2 = self.norm_2(x)
    output, attention_weight = self.attn_2(x2, e_outputs, e_outputs, src_mask)
    x = x + self.dropout_2(output)
    
    x2 = self.norm_3(x)
    x = x + self.dropout_3(self.ff(x2))
    return x, attention_weight

import copy

def get_clones(module, N):
  return nn.ModuleList([copy.deepcopy(module) for i in range(N)])

class Encoder(nn.Module):
  def __init__(self, text_embedding_vecotrs, N, heads, dropout):
    super().__init__()
    self.N = N
    self.embed = Embedder(text_embedding_vecotrs)
    self.pe = PositionalEncoder(d_model, dropout_rate=dropout)
    self.layers = get_clones(EncoderLayer(d_model, heads, dropout), N)
    self.norm = nn.LayerNorm(d_model)
  def forward(self, src, mask):
    x = self.embed(src)
    x = self.pe(x)
    for i in range(self.N):
      x, attention_weight = self.layers[i](x, mask)
    return self.norm(x), attention_weight


class Decoder(nn.Module):
  def __init__(self, text_embedding_vecotrs, N, heads, dropout):
    super().__init__()
    self.N = N
    self.embed = Embedder(text_embedding_vecotrs)
    self.pe = PositionalEncoder(d_model, dropout_rate=dropout)
    self.layers = get_clones(DecoderLayer(d_model, heads, dropout), N)
    self.norm = nn.LayerNorm(d_model)
  def forward(self, trg, e_outputs, src_mask, trg_mask):
    x = self.embed(trg)
    x = self.pe(x)
    for i in range(self.N):
      x, attention_weight = self.layers[i](x, e_outputs, src_mask, trg_mask)
    return self.norm(x), attention_weight

class Transformer(nn.Module):
  def __init__(self, encoder_embedding_vecotrs, decoder_embedding_vecotrs, trg_vocab, N, heads, dropout):
    super().__init__()
    self.encoder = Encoder(encoder_embedding_vecotrs, N, heads, dropout)
    self.decoder = Decoder(decoder_embedding_vecotrs, N, heads, dropout)
    self.out = nn.Linear(d_model, trg_vocab)
  def forward(self, src, trg, src_mask, trg_mask):
    e_outputs, _ = self.encoder(src, src_mask)
    d_output, _ = self.decoder(trg, e_outputs, src_mask, trg_mask)
    output = self.out(d_output)
    return output

def get_model(encoder_embedding_vecotrs, decoder_embedding_vecotrs, trg_vocab, n_layers, heads, dropout):
  model = Transformer(encoder_embedding_vecotrs, decoder_embedding_vecotrs, trg_vocab, n_layers, heads, dropout)
  
  """   
    if opt.load_weights is not None:
        print("loading pretrained weights...")
        model.load_state_dict(torch.load(f'{opt.load_weights}/model_weights'))
    else:
        for p in model.parameters():
            if p.dim() > 1:
                nn.init.xavier_uniform_(p) 
    """
    
  for p in model.parameters():
    if p.dim() > 1:
      nn.init.xavier_uniform_(p) 
  device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    
  model.to(device)

  return model

from torch.autograd import Variable
import numpy as np

#デコーダ用に三角形のマスクを作成
def nopeak_mask(size):
    np_mask = np.triu(np.ones((1, size, size)),
    k=1).astype('uint8')
    np_mask =  Variable(torch.from_numpy(np_mask) == 0)
    #if opt.device == 0:
    #  np_mask = np_mask.cuda()
    return np_mask

def create_masks(src, trg):
    #エンコーダ用のpaddingにマスク
    src_mask = (src != SRC.vocab.stoi['<pad>']).unsqueeze(-2)

    #デコーダ用のマスクを作成
    if trg is not None:
        trg_mask = (trg != TRG.vocab.stoi['<pad>']).unsqueeze(-2)
        size = trg.size(1) # get seq_len for matrix
        np_mask = nopeak_mask(size)
        if trg.is_cuda:
            np_mask.cuda()
        device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
        np_mask = np_mask.to(device)
        trg_mask = trg_mask & np_mask #triu、pad両方のmaskでTureのものだけ生き残る
        
    else:
        trg_mask = None
    return src_mask, trg_mask

d_model = 300 #分散表現の次元数
N= 3 #Nx
head_num = 5 #headの数
dropout_rate = 0.1


batch = next(iter(val_dl))
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
src = batch.src[0].to(device)
trg = batch.trg[0].to(device)
trg_input = trg[:, :-1]
src_mask, trg_mask = create_masks(src, trg_input) #mask部分がFalseに

net1 = get_model(SRC.vocab.vectors, TRG.vocab.vectors, len(TRG.vocab.stoi), N, head_num, dropout_rate)

#self, src, trg, src_mask, trg_mask
preds = net1(src, trg_input, src_mask, trg_mask)
print(preds.shape)

import torch.optim as optim

dataloaders_dict = {"train": train_dl, "val": val_dl}
model = get_model(SRC.vocab.vectors, TRG.vocab.vectors, len(TRG.vocab.stoi), N, head_num, dropout_rate)

#損失関数を定義
criterion = nn.CrossEntropyLoss(ignore_index=TRG.vocab.stoi['<pad>'])

#最適化手法
#optimizer = optim.Adam(model.parameters(), lr=2e-5)
#attention is all you needの設定
optimizer = optim.Adam(model.parameters(), lr=0.0001, betas=(0.9, 0.98), eps=1e-9)

def translate(model, src, max_len=80, custom_sentence=False):
    
    model.eval()
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    sentence = SRC.preprocess(src)
    indexed = []
    print(sentence)
    for tok in sentence:
      if SRC.vocab.stoi[tok] != 0:
        indexed.append(SRC.vocab.stoi[tok])
      else:
        indexed.append(SRC.vocab.stoi['<unk>'])
      #indexed.append(get_synonym(tok, SRC)) #wordnetによる未知語の補足
      #ここでindexedは単語idのリストに
    src = Variable(torch.LongTensor([indexed])).to(device)
    """
    if custom_sentence == True:
      src = tokenize_en(src)
      sentence=Variable(torch.LongTensor([[EN_TEXT.vocab.stoi[tok] for tok in sentence]])).to(device)
    """
    src_mask = (src != SRC.vocab.stoi['<pad>']).unsqueeze(-2)
    e_outputs, _ = model.encoder(src, src_mask)
    
    outputs = torch.zeros(max_len).type_as(src.data)
    outputs[0] = torch.LongTensor([TRG.vocab.stoi['<sos>']])
    for i in range(1, max_len):    
      trg_mask = np.triu(np.ones((1, i, i)).astype('uint8'))
      #trg_mask = nopeak_mask(1).to(device)
      trg_mask = Variable(torch.from_numpy(trg_mask) == 0).to(device)  
      out, _ = model.decoder(outputs[:i].unsqueeze(0), e_outputs, src_mask, trg_mask)
      out = model.out(out)
      out = F.softmax(out, dim=-1) #[1,1,単語数]
      #topのk個をとってくる、valはtopの値でixはそのindex
      #out[:, -1].dataは[[単語数]]
      val, ix = out[:, -1].data.topk(1)
      outputs[i] = ix[0][0] #softmaxが一番大きかったindex
      if ix[0][0] == TRG.vocab.stoi['<eos>']:
        break
    return ' '.join([TRG.vocab.itos[ix] for ix in outputs[:i]])

net1 = get_model(SRC.vocab.vectors, TRG.vocab.vectors, len(TRG.vocab.stoi), N, head_num, dropout_rate)
#I also have blow if you prefer to do a few lines ., No , I am ok , really ., Come on man ! I even got dope and acid ! Try some !
sentence = ['Oh , umm , no thanks .', 'I also have blow if you prefer to do a few lines .',
            'No , I am ok , really .']
max_len = MAX_LENGTH
for s in sentence:
  print(translate(net1, s, max_len, True))

#モデルを訓練して、訓練したモデルをreturnする
#モデル、辞書型で定義したdataloder(イテレータ)、損失関数、オプティマイザ、エポック数を渡す
def train_model(net, dataloaders_dict, optimizer, num_epochs):

    # GPUが使えるかを確認
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    print("使用デバイス：", device)
    print('-----start-------')
    # モデルをGPUへ渡す
    net.to(device)

    # ネットワークがある程度固定であれば、高速化させる
    torch.backends.cudnn.benchmark = True

    # 各epoch
    for epoch in range(num_epochs):
        # 学習と検証
        for phase in ['train', 'val']:
            if phase == 'train':
                net.train()  # モデルを訓練モードに
            else:
                net.eval()   # モデルを検証モードに

            epoch_loss = 0.0  # epochの損失和
            

            # 各バッチ
            for batch in (dataloaders_dict[phase]):
                # batchはTextとLableの辞書オブジェクト

                # GPUが使えるならGPUにデータを送る
                src = batch.src[0].to(device)  # 文章[バッチ, 文長]
                trg = batch.trg[0].to(device)  # ラベル[バッチ, 文長]
                trg_input = trg[:, :-1] #[バッチ, 文長-1]
                optimizer.zero_grad()
                
                # 順伝搬（forward）計算
                with torch.set_grad_enabled(phase == 'train'):
                    #マスクを生成する
                    src_mask, trg_mask = create_masks(src, trg_input)
                    #予測
                    preds = model(src, trg_input, src_mask, trg_mask) #[バッチ, 文長-1, 単語の種類]
                    #targetを一つずつずらしたものが正解になる
                    ys = trg[:, 1:].contiguous().view(-1) #[1バッチ目の正解1単語目,1バッチ目の正解2単語目,...,2バッチ目の正解1単語目,...]
                    #損失をだす
                    #loss = criterion(preds.view(-1, preds.size(-1)), ys, ignore_index=opt.trg_pad)
                    #各バッチの平均損失ちを算出
                    loss = F.cross_entropy(preds.view(-1, preds.size(-1)), ys, ignore_index=TRG.vocab.stoi['<pad>'])
                    
                    # 訓練時はバックプロパゲーション
                    if phase == 'train':
                        #勾配を計算
                        loss.backward()
                        #パラメータの更新
                        optimizer.step()

                    # 各iterの損失を足していく
                    # 各epoch_lossの合計を出すためにわざとバッチサイズをかけている
                    epoch_loss += loss.item() * src.size(0) 
                    
            #1エポック分が終了
            if phase == 'val':
              sentence = ['Oh , umm , no thanks .', 'I also have blow if you prefer to do a few lines .',
            'No , I am ok , really .']
              max_len = 20
              for s in sentence:
                print(translate(net, s, max_len, True))
                
            # epochごとのlossと正解率
            # バッチサイズをかけているので、len(dataloaders_dict[phase].dataset)で割り算して大丈夫
            epoch_loss = epoch_loss / len(dataloaders_dict[phase].dataset)
            print('Epoch {}/{} | {:^5} |  Loss: {:.4f}'.format(epoch+1, num_epochs, phase, epoch_loss))

    return net

import torch.nn.functional as F
num_epochs = 10
net_trained = train_model(model, dataloaders_dict, optimizer, num_epochs=num_epochs)

